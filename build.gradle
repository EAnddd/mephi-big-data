plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}
repositories {
    mavenCentral()
    maven{
        url {
            "https://repository.apache.org/content/repositories/releases/"
        }
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.18'
    compileOnly 'org.projectlombok:lombok:1.18.18'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.apache.kafka:kafka-clients:2.5.0'
    implementation 'com.datastax.spark:spark-cassandra-connector_2.12:3.0.1'
    implementation 'org.apache.spark:spark-core_2.12:3.0.1'
    implementation 'org.apache.spark:spark-streaming-kafka-0-10_2.12:3.0.1'
    implementation 'org.apache.spark:spark-streaming_2.12:3.0.1'
    implementation 'com.fasterxml.jackson.module:jackson-module-scala_2.12:2.12.2'
    implementation 'org.apache.hadoop:hadoop-common:3.2.1'
    implementation 'org.apache.hadoop:hadoop-client:3.2.1'
    implementation ('org.apache.cassandra:cassandra-all:3.11.10') {
        exclude (group: 'org.slf4j')
        exclude (group: 'log4j')
    }
    implementation 'org.apache.hadoop:hadoop-mapreduce-client-jobclient:3.2.1'
    implementation 'org.apache.hadoop:hadoop-yarn-api:3.2.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.apache.mrunit:mrunit:1.0.0:hadoop2'
    testImplementation 'org.testcontainers:kafka:1.15.0'
    testImplementation 'com.holdenkarau:spark-testing-base_2.12:2.4.0_0.14.0'
    testImplementation 'org.testcontainers:cassandra:1.15.2'
}

test {
    useJUnitPlatform()
}


task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.example.mr.LogsCounter'
    }
    archiveClassifier = "all"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

task fatJarSpark(type: Jar) {

    manifest {
        attributes 'Main-Class': 'com.example.spark.WeatherAggregator'
    }
    archiveClassifier = "all"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    zip64 true
}